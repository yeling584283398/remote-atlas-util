{"code":"import fs from 'fs';\r\nimport path from 'path';\r\nlet excludes = [];\r\nconst packSubKeys = {};\r\nfunction setSubKey(texturePath) {\r\n    const dirs = fs.readdirSync(texturePath);\r\n    dirs.forEach((dir) => {\r\n        if (excludes.includes(dir) || !fs.existsSync(path.resolve(texturePath, `${dir}/auto-atlas.pac`)))\r\n            return;\r\n        const stat = fs.lstatSync(path.resolve(texturePath, dir));\r\n        if (stat.isDirectory()) {\r\n            packSubKeys[dir] = {};\r\n            const files = fs.readdirSync(path.resolve(texturePath, dir));\r\n            const images = [];\r\n            files.forEach((file) => {\r\n                if (file.indexOf('.meta') < 0 && file.indexOf('.pac') < 0 && file.indexOf('.DS') < 0) {\r\n                    if (/\\s/.test(file))\r\n                        throw new Error(`[setSubKey]the file name can not contain space: ${dir}/${file}`);\r\n                    file = file.split('.')[0];\r\n                    images.push(file);\r\n                }\r\n            });\r\n            packSubKeys[dir] = images.join(',');\r\n        }\r\n    });\r\n}\r\nexport function createSpriteConfig(options) {\r\n    if (!options.rootPath) {\r\n        throw new Error('please provide the rootPath parameter');\r\n    }\r\n    const rootPath = options.rootPath;\r\n    let texturePath = path.resolve(rootPath, 'assets/resources/texture');\r\n    if (options.texturePath)\r\n        texturePath = options.texturePath;\r\n    let spriteConfigPath = path.resolve(rootPath, 'config/sprite.config.json');\r\n    if (options.spriteConfigPath)\r\n        spriteConfigPath = options.spriteConfigPath;\r\n    if (options.excludes)\r\n        excludes = options.excludes;\r\n    setSubKey(texturePath);\r\n    const spriteConfig = {\r\n        engine: 'egret',\r\n        size: {\r\n            width: 2048,\r\n            height: 2048,\r\n        },\r\n        webp: true,\r\n        quality: [0.8, 0.9],\r\n        spriteConfig: {},\r\n    };\r\n    Object.keys(packSubKeys).forEach((name) => {\r\n        const group = (spriteConfig.spriteConfig[name] = {});\r\n        group.keys = packSubKeys[name].split(',');\r\n    });\r\n    if (!fs.existsSync(spriteConfigPath))\r\n        fs.mkdirSync(spriteConfigPath.slice(0, spriteConfigPath.lastIndexOf('/')));\r\n    fs.writeFileSync(spriteConfigPath, JSON.stringify(spriteConfig, null, 2));\r\n    console.log('sprite.config.json updated');\r\n}\r\n","references":[],"dts":{"name":"/Users/peihongchen/Project/remote-atlas-util/node_modules/.cache/rollup-plugin-typescript2/placeholder/tool.d.ts","writeByteOrderMark":false,"text":"declare type CreateSpriteConfigOptions = {\r\n    /**\r\n     * the root path of project.\r\n     */\r\n    rootPath: string;\r\n    /**\r\n     * the textures relative path.\r\n     * @Defaults: assets/resources/texture\r\n     */\r\n    texturePath?: string;\r\n    /**\r\n     * the sprite config relative path.\r\n     * @Defaults: config/sprite.config.json\r\n     */\r\n    spriteConfigPath?: string;\r\n    /**\r\n     * the folders name don't want replace remote atlas.\r\n     * @Defaults: []\r\n     */\r\n    excludes?: string[];\r\n};\r\nexport declare function createSpriteConfig(options: CreateSpriteConfigOptions): void;\r\nexport {};\r\n"}}
