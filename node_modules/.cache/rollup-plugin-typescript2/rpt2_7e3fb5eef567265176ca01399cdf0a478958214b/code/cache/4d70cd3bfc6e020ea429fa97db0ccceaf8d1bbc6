{"code":"import { Asset, assetManager, Rect, resources, Size, Vec2 } from \"cc\";\r\nimport { BUILD } from \"cc/env\";\r\nexport default class RemoteAtlasUtil {\r\n    constructor(options = {}) {\r\n        this.atlasUrlMap = {};\r\n        this.imageUrlMap = {};\r\n        this.imageUrlCache = {};\r\n        this.uuidMap = {};\r\n        if (!BUILD)\r\n            return;\r\n        this.texturePath = options.texturePath || 'texture';\r\n        this.hackDownloader();\r\n        this.hackPipeline();\r\n    }\r\n    setRemoteUrl(name, atlasUrl, imageUrl) {\r\n        if (!BUILD)\r\n            return;\r\n        const info = resources.getInfoWithPath(`${this.texturePath}/${name}/auto-atlas`);\r\n        if (!info || !info.packs) {\r\n            console.warn(`[RemoteAtlasUtil.setRemoteUrl]can\\'t found the auto-atlas file.(name: ${name})`);\r\n            return;\r\n        }\r\n        const packUUid = info.packs[0].uuid;\r\n        this.uuidMap[packUUid] = name;\r\n        this.imageUrlCache[packUUid] = imageUrl;\r\n        this.atlasUrlMap[name + '.json'] = atlasUrl;\r\n    }\r\n    setSingleImageUrl(imageRelativePath, url) {\r\n        if (!BUILD)\r\n            return;\r\n        const info = resources.getInfoWithPath(`${this.texturePath}/${imageRelativePath}`);\r\n        if (!info) {\r\n            console.warn(`[RemoteAtlasUtil.setSingleImageUrl]can\\'t found the spriteFrame file.(name: ${name})`);\r\n            return;\r\n        }\r\n        const uuid = info.uuid;\r\n        this.imageUrlMap[uuid] = url;\r\n    }\r\n    hackDownloader() {\r\n        const oldJsonDownloader = assetManager.downloader['_downloaders']['.json'];\r\n        assetManager.downloader.register('.json', (url, options, onComplete) => {\r\n            const newOnComplete = (err, data) => {\r\n                if (!err && data) {\r\n                    const pathname = url.slice(url.lastIndexOf('/') + 1);\r\n                    const uuid = pathname.slice(0, pathname.indexOf('.'));\r\n                    if (this.uuidMap[uuid]) {\r\n                        const imageUrl = this.imageUrlCache[uuid];\r\n                        this.imageUrlMap[data[1][0].split('@')[0]] = imageUrl;\r\n                        data[1].push(this.uuidMap[uuid] + '.json');\r\n                        data[2].push('_depends');\r\n                        data[5].forEach((ins) => {\r\n                            ins[3].push(0);\r\n                            ins[4].push(1);\r\n                            ins[5].push(1);\r\n                        });\r\n                    }\r\n                }\r\n                onComplete(err, data);\r\n            };\r\n            oldJsonDownloader(url, options, newOnComplete);\r\n        });\r\n    }\r\n    hackPipeline() {\r\n        assetManager.transformPipeline.append((task) => {\r\n            const input = task.output = task.input;\r\n            input.forEach((item) => {\r\n                if (item.uuid.indexOf('.json') >= 0) {\r\n                    item.url = this.atlasUrlMap[item.uuid];\r\n                    item.ext = '.sa';\r\n                    item.isNative = true;\r\n                    item.options.uuid = item.uuid;\r\n                }\r\n                else if (this.imageUrlMap[item.uuid]) {\r\n                    item.url = this.imageUrlMap[item.uuid];\r\n                }\r\n            });\r\n        });\r\n        assetManager.parser.register('.sa', (file, options, onComplete) => {\r\n            const asset = new Asset();\r\n            asset._uuid = options.uuid;\r\n            onComplete(null, asset);\r\n            const data = JSON.parse(file);\r\n            const name = options.uuid.split('.')[0];\r\n            const frameKeys = Object.keys(data.frames);\r\n            frameKeys.forEach((key) => {\r\n                const info = data.frames[key];\r\n                const rect = new Rect(info.x, info.y, info.w, info.h);\r\n                const offset = new Vec2(info.offX, info.offY);\r\n                const originalSize = new Size(info.sourceW, info.sourceH);\r\n                const assetInfo = resources.getInfoWithPath(`${this.texturePath}/${name}/${key}/spriteFrame`);\r\n                if (!assetInfo)\r\n                    return;\r\n                const uuid = assetInfo.uuid;\r\n                let spriteFrame = assetManager.assets.get(uuid);\r\n                if (!spriteFrame) {\r\n                    const file = assetManager['_files'].get(`${uuid}@import`);\r\n                    if (file) {\r\n                        spriteFrame = file[5][0];\r\n                        file[1][1] && file[1].pop();\r\n                        file[2][1] && file[2].pop();\r\n                        file[8][1] && file[8].pop();\r\n                        file[9][1] && file[9].pop();\r\n                        file[10][1] && file[10].pop();\r\n                    }\r\n                }\r\n                if (!spriteFrame)\r\n                    return;\r\n                if (spriteFrame.originalSize && spriteFrame.originalSize.width === originalSize.width)\r\n                    return;\r\n                spriteFrame.rect = rect;\r\n                spriteFrame.offset = offset;\r\n                spriteFrame.originalSize = originalSize;\r\n                spriteFrame.rotated = false;\r\n            });\r\n        });\r\n    }\r\n}\r\n","references":[],"dts":{"name":"/Users/peihongchen/Project/remote-atlas-util/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"declare type RemoteAtlasUtilOptions = {\r\n    texturePath?: string;\r\n};\r\nexport default class RemoteAtlasUtil {\r\n    constructor(options?: RemoteAtlasUtilOptions);\r\n    private texturePath;\r\n    private atlasUrlMap;\r\n    private imageUrlMap;\r\n    private imageUrlCache;\r\n    private uuidMap;\r\n    setRemoteUrl(name: string, atlasUrl: string, imageUrl: string): void;\r\n    setSingleImageUrl(imageRelativePath: string, url: string): void;\r\n    private hackDownloader;\r\n    private hackPipeline;\r\n}\r\nexport {};\r\n"}}
